import React, { Component } from "react";
import { connect } from "react-redux";

import Services from "../../components/case/Services";

class View extends Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  cards = [
    {
      title: "Разработка",
      subTitle: "Создадим мобильную экосистему приносящую прибыль",
      content: [
        {
          type: "text",
          content:
            "Мобильное приложение (front-end) - это то, с чем напрямую взаимодействуют пользователи, поэтому, мы используем самые качественные «нативные» технологии в их разработке.",
        },
        {
          type: "text",
          content:
            "Серверная часть (back-end) - это внутреннее ядро маркетплейса, здесь мы применяем лучший стек технологий и скилов. Безопасно и стабильно с потенциалом внедрения ИИ.",
        },
        {
          type: "text",
          content:
            "Очень широкий и профильный багаж в разработке маркетплейсов. Senior-специалисты с опытом более 9 лет окажут свыше 20 услуг на всем цикле разработки. Сделаем несколько этапов, либо все под ключ. Итерационно и гибко.",
        },
        {
          type: "text",
          content:
            "<b>Делали маркетплейсы</b> для сфер здоровья и юриспруденции, <br class='_elemDesktop' />общепита и развлечений, транспорта и госуслуг",
        },
      ],
      info: {
        title: "Базовые технологии применения",
        content: [
          {
            title: "Дизайн UX/UI:",
            content: "Figma, After Effects",
          },
          {
            title: "iOS:",
            content: "Swift, SwiftUI, Xcode",
          },
          {
            title: "Android:",
            content: "Kotlin, Android Studio",
          },
          {
            title: "Back-end:",
            content: "Python, Django, Docker, Swagger",
          },
          {
            title: "СУБД:",
            content: "PostgreSQL, SQLite, MongoDB",
          },
          {
            title: "Кроссплатформа:",
            content: "Flutter, Firebase",
          },
          {
            title: "Front-end:",
            content: "React, Redux, JSX, SCSS, Next.js, Gulp",
          },
          {
            title: "Тип и формат взаимодействия:",
            content: "REST API, JSON, SOAP",
          },
          {
            title: "Контроль достижения качества:",
            content: "Trello, GitLab, Telegram, Google Workspace",
          },
        ],
      },
    },
    {
      title: "Функционал",
      subTitle: "Возможности нативного приложения безграничны",
      content: [
        {
          type: "text",
          content:
            "Даже в рамках маркетплейса любая функция имеет ряд дополнительных возможностей которыми она может обладать, т.е. есть ствол (функции), ветки (возможности с логикой) и листья (дизайн).",
        },
        {
          type: "text",
          content:
            "Работа каждой функции интерпретируется под конкретную идею, ведь у каждой площадки своя задумка бизнес-процессов, уникальных отличий и своего позиционирования с видением и монетизацией.",
        },
        {
          type: "text",
          content:
            "Поэтому, всегда пишется ТЗ на необходимый функционал и осуществляется индивидуальный просчёт реализации маркетплейса в рамках конкретной идеи, если реализация планируется по модели fix price, т.е. по фиксированной стоимости и сроку, а не на почасовой основе (сколько отработали, столько заплати).",
        },
      ],
      info: {
        title: "Популярные функции",
        content: [
          {
            title: "Онбординг:",
            content:
              "Загрузочный экран с анимацией, Экраны ознакомления (презентация), Подсказки на экранах",
          },
          {
            title: "Логин:",
            content:
              "Авторизация, Регистрация, Восстановление пароля, Apple In, Google In, СМС-сервис, Log Out",
          },
          {
            title: "Профиль пользователя:",
            content:
              "Аватарка, Имя, Никнейм, Почта, Описание, Интересы, Просмотр чужого профиля",
          },
          {
            title: "Личный кабинет:",
            content:
              "Избранное, История, Настройки, Редактирование профиля, Смена пароля, Политика конфиденциальности и условия использования",
          },
          {
            title: "Элементы площадки:",
            content:
              "Создание товара/услуги, Создание события, Одобрение покупки/участия,  Лента товаров/услуг или событий, Каталог, Карточка товара/услуги или события, Корзина, Система оплаты (эквайринг), Карта (пины с группировкой), Геолокация (маршруты), Фильтр, Поиск",
          },
          {
            title: "Элементы соц сети:",
            content:
              "Чат (тет-а-тет, групповой), Инвайты, Подписчики, Подписки, Рейтинг, Отзывы, Пожаловаться",
          },
          {
            title: "Дополнительно:",
            content:
              "Push-уведомления, Deep link, Dark mod, Служба поддержки, Аналитика, Админ-панель, Персонализация (алгоритмы, машинное обучение), Повышенная безопасность, Повышенная нагрузка",
          },
        ],
      },
    },
    {
      title: "Админ-панель",
      subTitle: "Маркетплейсу нужен контроль",
      content: [
        {
          type: "list",
          content: [
            "Управление событиями",
            "Контроль процессов",
            "Статистика всех действий",
          ],
        },
        {
          type: "text",
          content:
            "Когда в приложении взаимодействуют разные типы пользователей, должна быть возможность оперативного вмешательства без изменений в коде, особенно, когда осуществляются какие-либо финансовые транзакции.",
        },
        {
          type: "text",
          content:
            "Административная панель может собирать историю всех выполняемых действий с цепочкой их связи, анализом и интерпретацией результата в нужной форме. Ее необходимость и возможности часто недооценены.",
        },
      ],
      info: {
        title: "Варианты реализации админ-панели",
        content: [
          {
            title: "Стандартно:",
            content:
              "В виде веб-сайта с помощью базовых возможностей Django фреймворка",
          },
          {
            title: "Стандартно + адаптация:",
            content:
              "С дополнительной адаптацией под планшеты и мобильную версию",
          },
          {
            title: "Красиво и удобно (аналог CRM):",
            content:
              "В виде полноценного веб-сайта, с персональным дизайном, версткой и функционалом",
          },
          {
            title: "Личный кабинет:",
            content:
              "Избранное, История, Настройки, Редактирование профиля, Смена пароля, Политика конфиденциальности и условия использования",
          },
          {
            title: "CRM приложение:",
            content:
              "В виде отдельного мобильного приложения (здесь может подойти и кроссплатформа на Flutter, если админ-панель не слишком функциональна)",
          },
        ],
      },
    },
  ];

  render() {
    return <Services model={{ cards: this.cards }} />;
  }
}

function mapStateToProps() {
  return {};
}

export default connect(mapStateToProps)(View);
